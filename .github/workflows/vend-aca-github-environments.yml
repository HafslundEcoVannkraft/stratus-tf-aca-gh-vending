name: Create ACA GitHub Environments

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Filename of tfvars file (required, will be searched for recursively in the repository)'
        required: true
        type: string
      github_token:
        description: 'GitHub token with repo, workflow and read:org permissions (required)'
        required: true
        type: string
      github_owner:
        description: 'GitHub organization or user name (optional, defaults to HafslundEcoVannkraft)'
        required: false
        type: string
        default: 'HafslundEcoVannkraft'
      github_env_file:
        description: 'Filename of GitHub environment config (optional, defaults to github-envrionments.yaml)'
        required: false
        type: string
        default: 'github-envrionments.yaml'
      is_stratus_tf_examples:
        description: 'Set to true if calling from stratus-tf-examples repo (optional, defaults to false)'
        required: false
        type: boolean
        default: false
      operation:
        description: 'Operation to perform (apply or destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy
        default: 'apply'

permissions:
  id-token: write
  contents: read

jobs:
  prepare:
    name: Prepare Deployment Files
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.copy_files.outputs.environment }}
      code_name: ${{ steps.copy_files.outputs.code_name }}
      location: ${{ steps.copy_files.outputs.location }}
      subscription_id: ${{ steps.copy_files.outputs.subscription_id }}
      resource_group: ${{ steps.copy_files.outputs.resource_group }}
      tfvars_file: ${{ steps.copy_files.outputs.tfvars_file }}
    steps:
      # Checkout the IaC repository (this repo)
      - name: Checkout IaC repository
        uses: actions/checkout@v4.2.2

      # Checkout the public Terraform module repo into a subfolder
      - name: Checkout public module
        uses: actions/checkout@v4
        with:
          repository: HafslundEcoVannkraft/stratus-tf-aca-gh-vending
          path: terraform-work

      # Find and copy the tfvars and environment YAML file to terraform-work,
      # and append required variables to the tfvars file.
      - name: Find and copy tfvars and env file
        id: copy_files
        run: |
          # Find the tfvars file (search recursively if only a filename is given)
          TFVARS_FILE="${{ github.event.inputs.tfvars_file }}"
          if [[ "$TFVARS_FILE" != *"/"* ]]; then
            FOUND_TFVARS=$(find . -name "$TFVARS_FILE" -type f | head -n 1)
            if [ -n "$FOUND_TFVARS" ]; then
              TFVARS_FILE="$FOUND_TFVARS"
            fi
          fi
          if [ ! -f "$TFVARS_FILE" ]; then
            echo "Error: tfvars file not found at $TFVARS_FILE"
            exit 1
          fi

          # Find the GitHub environment YAML file
          ENV_FILE="${{ github.event.inputs.github_env_file }}"
          FOUND_ENV=$(find . -name "$ENV_FILE" -type f | head -n 1)
          if [ -z "$FOUND_ENV" ]; then
            echo "Error: Could not find GitHub environment file '$ENV_FILE' in repository"
            exit 1
          fi

          # Copy both files to terraform-work
          cp "$TFVARS_FILE" terraform-work/
          TFVARS_FILE="terraform-work/$(basename "$TFVARS_FILE")"
          cp "$FOUND_ENV" terraform-work/
          ENV_FILE="terraform-work/$(basename "$FOUND_ENV")"

          # Extract variables for outputs
          SUBSCRIPTION_ID=$(grep 'subscription_id' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          LOCATION=$(grep 'location' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          CODE_NAME=$(grep 'code_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          ENVIRONMENT=$(grep 'environment' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          STATE_STORAGE_ACCOUNT=$(grep 'state_storage_account_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          RESOURCE_GROUP=$(grep 'resource_group_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          if [ -z "$RESOURCE_GROUP" ]; then
            RESOURCE_GROUP="${CODE_NAME}-rg-tf-state"
          fi

          # Append required variables to the tfvars file
          {
            echo "github_owner = \"${{ github.event.inputs.github_owner }}\""
            echo "github_env_file = \"$(basename "$FOUND_ENV")\""
            echo "is_stratus_tf_examples = ${{ github.event.inputs.is_stratus_tf_examples }}"
          } >> "$TFVARS_FILE"

          # Set outputs for downstream jobs
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "code_name=$CODE_NAME" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT
          echo "subscription_id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "tfvars_file=$TFVARS_FILE" >> $GITHUB_OUTPUT

      # Cache the terraform-work directory for performance
      - name: Cache terraform-work
        uses: actions/cache@v4.2.3
        with:
          key: ${{ steps.copy_files.outputs.code_name }}-${{ steps.copy_files.outputs.environment }}
          path: terraform-work

  plan:
    needs: prepare
    permissions:
      actions: read
      contents: read
      pull-requests: write
      id-token: write
    uses: HafslundEcoVannkraft/stratus-lz-workflows/.github/workflows/lz_tf_plan.yaml@feat/cache
    name: ${{ needs.prepare.outputs.environment }} Plan
    with:
      path: terraform-work
      tf_version: latest
      tf_key: ${{ needs.prepare.outputs.environment }}
      tf_vars_file: ${{ needs.prepare.outputs.tfvars_file }}
      gh_environment: ${{ needs.prepare.outputs.environment }}-plan
      runner: stratus-github-hosted
      do-destroy: ${{ github.event.inputs.operation == 'destroy' }}
      cache_key: ${{ needs.prepare.outputs.code_name }}-${{ needs.prepare.outputs.environment }}
      cache_path: terraform-work

  apply:
    if: github.event.inputs.operation == 'apply'
    needs: [prepare, plan]
    permissions:
      actions: read
      contents: read
      pull-requests: write
      id-token: write
    uses: HafslundEcoVannkraft/stratus-lz-workflows/.github/workflows/lz_tf_apply.yaml@feat/cache
    name: ${{ needs.prepare.outputs.environment }} Apply
    with:
      path: terraform-work
      tf_version: latest
      tf_key: ${{ needs.prepare.outputs.environment }}
      tf_vars_file: ${{ needs.prepare.outputs.tfvars_file }}
      gh_environment: ${{ needs.prepare.outputs.environment }}-apply
      runner: stratus-github-hosted
      cache_key: ${{ needs.prepare.outputs.code_name }}-${{ needs.prepare.outputs.environment }}
      cache_path: terraform-work