name: Vend ACA GitHub Environments

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Filename of tfvars file (required, will be searched for recursively in the repository)'
        required: true
        type: string
      github_token:
        description: 'GitHub token with repo, workflow and read:org permissions (required)'
        required: true
        type: string
      github_owner:
        description: 'GitHub organization or user name (optional, defaults to HafslundEcoVannkraft)'
        required: false
        type: string
        default: 'HafslundEcoVannkraft'
      github_env_file:
        description: 'Filename of GitHub environment config (optional, defaults to stratus-aca-github-environments.yaml)'
        required: false
        type: string
        default: 'stratus-aca-github-environments.yaml'
      is_stratus_tf_examples:
        description: 'Set to true if calling from stratus-tf-examples repo (optional, defaults to false)'
        required: false
        type: boolean
        default: false
      operation:
        description: 'Operation to perform (apply or destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy
        default: 'apply'

permissions:
  id-token: write
  contents: read

env:
  DEPLOYMENT_DIR: .deployment-temp

jobs:
  deploy:
    name: Deploy GitHub Environments
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Load tfvars file
        id: tfvars
        run: |
          # Load variables from tfvars file
          TFVARS_FILE="${{ github.event.inputs.tfvars_file }}"
          
          # If only a filename was provided (no directory), search for it recursively
          if [[ "$TFVARS_FILE" != *"/"* ]]; then
            echo "Searching for tfvars file '$TFVARS_FILE' recursively..."
            FOUND_TFVARS=$(find . -name "$TFVARS_FILE" -type f | head -n 1)
            
            if [ -n "$FOUND_TFVARS" ]; then
              echo "Found tfvars file at: $FOUND_TFVARS"
              TFVARS_FILE="$FOUND_TFVARS"
            fi
          fi
          
          echo "Loading tfvars from $TFVARS_FILE"
          if [ ! -f "$TFVARS_FILE" ]; then
            echo "Error: tfvars file not found at $TFVARS_FILE"
            exit 1
          fi
          
          # Extract required variables
          SUBSCRIPTION_ID=$(grep 'subscription_id' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          LOCATION=$(grep 'location' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          CODE_NAME=$(grep 'code_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          ENVIRONMENT=$(grep 'environment' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          STATE_STORAGE_ACCOUNT=$(grep 'state_storage_account_name' "$TFVARS_FILE" | cut -d '=' -f2 | tr -d ' "')
          
          # Validate required variables
          if [ -z "$SUBSCRIPTION_ID" ] || [ -z "$LOCATION" ] || [ -z "$CODE_NAME" ] || [ -z "$ENVIRONMENT" ] || [ -z "$STATE_STORAGE_ACCOUNT" ]; then
            echo "Error: Missing required variables in tfvars file"
            exit 1
          fi
          
          # Set outputs
          echo "subscription_id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT
          echo "code_name=$CODE_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "state_storage_account=$STATE_STORAGE_ACCOUNT" >> $GITHUB_OUTPUT

      - name: Set up temporary deployment directory
        run: |
          # Create temporary deployment directory
          mkdir -p ${{ env.DEPLOYMENT_DIR }}
          
          # Download template files from the GitHub repository
          curl -s https://raw.githubusercontent.com/HafslundEcoVannkraft/stratus-tf-aca-gh-vending/main/workflow-templates/main.tf -o ${{ env.DEPLOYMENT_DIR }}/main.tf
          curl -s https://raw.githubusercontent.com/HafslundEcoVannkraft/stratus-tf-aca-gh-vending/main/workflow-templates/variables.tf -o ${{ env.DEPLOYMENT_DIR }}/variables.tf
          
          # Create tfvars file for the deployment
          cat > ${{ env.DEPLOYMENT_DIR }}/deployment.auto.tfvars << EOF
          subscription_id            = "${{ steps.tfvars.outputs.subscription_id }}"
          location                   = "${{ steps.tfvars.outputs.location }}"
          code_name                  = "${{ steps.tfvars.outputs.code_name }}"
          environment                = "${{ steps.tfvars.outputs.environment }}"
          state_storage_account_name = "${{ steps.tfvars.outputs.state_storage_account }}"
          github_token               = "${{ github.event.inputs.github_token }}"
          github_owner               = "${{ github.event.inputs.github_owner }}"
          is_stratus_tf_examples     = ${{ github.event.inputs.is_stratus_tf_examples }}
          EOF
          
          # Determine the GitHub environment file to use
          ENV_FILE="${{ github.event.inputs.github_env_file }}"
          if [ -z "$ENV_FILE" ]; then
            ENV_FILE="stratus-aca-github-environments.yaml"
          fi
          
          # Search for the file recursively from repository root
          FOUND_FILE=$(find . -name "$ENV_FILE" -type f | head -n 1)
          
          if [ -z "$FOUND_FILE" ]; then
            echo "Error: Could not find GitHub environment file '$ENV_FILE' in repository"
            exit 1
          fi
          
          echo "Found GitHub environment file at: $FOUND_FILE"
          
          # Copy the environment file to the deployment directory
          cp "$FOUND_FILE" ${{ env.DEPLOYMENT_DIR }}/
          
          # Update the github_env_file variable in the tfvars to point to the correct file in the deployment directory
          echo "github_env_file         = \"$(basename $FOUND_FILE)\"" >> ${{ env.DEPLOYMENT_DIR }}/deployment.auto.tfvars
          
          ls -la ${{ env.DEPLOYMENT_DIR }}/

      - name: Terraform Init
        working-directory: ${{ env.DEPLOYMENT_DIR }}
        run: terraform init -backend-config=backend.conf
      
      - name: Terraform Validate
        working-directory: ${{ env.DEPLOYMENT_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.DEPLOYMENT_DIR }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        if: github.event.inputs.operation == 'apply'
        working-directory: ${{ env.DEPLOYMENT_DIR }}
        run: terraform apply -auto-approve tfplan
      
      - name: Terraform Destroy
        if: github.event.inputs.operation == 'destroy'
        working-directory: ${{ env.DEPLOYMENT_DIR }}
        run: terraform destroy -auto-approve

      - name: Clean up temp directory
        if: always()
        run: |
          if [ -d "${{ env.DEPLOYMENT_DIR }}" ]; then
            rm -rf ${{ env.DEPLOYMENT_DIR }}
          fi 